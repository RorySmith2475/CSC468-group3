version: "3.7"

services:

  # flask:
  #   build: frontend
  #   container_name: flask
  # networks:
    # - custom_network
  #   restart: always
  #   expose:
  #     - 8080
  #   environment: 
  #     - BACKEND_PORT=${BACKEND_PORT}
    
  # nginx:
  #   build: nginx
  #   container_name: nginx
  # networks:
    # - custom_network
  #   restart: always
  #   ports:
  #     - 80:80

  manager:
    build: manager
    container_name: manager
    networks:
     - custom_network
    restart: always
    depends_on:
      - worker
      - rabbitmq_backend
      - rabbitmq_frontend
      - rabbitmq_confirm
    environment: 
      - NUM_WORKERS=${NUM_WORKERS}
      - FRONTEND_EXCHANGE=${FRONTEND_EXCHANGE}
      - BACKEND_EXCHANGE=${BACKEND_EXCHANGE}
      - CONFIRMS_EXCHANGE=${CONFIRMS_EXCHANGE}
      - QUOTE_SERVER_PORT=${QUOTE_SERVER_PORT}
      - MONGODB_DATABASE=pygangdb
      - MONGODB_USERNAME=pygang_worker
      - MONGODB_PASSWORD=pygang_worker
      - MONGODB_HOSTNAME=mongodb
    volumes: 
      - /var/run/docker.sock:/var/run/docker.sock

  worker:
    build: worker
    container_name: worker
    networks:
     - custom_network
    restart: always
    ports:
      - 4444:4444
    extra_hosts:
      - "quoteserver.seng.uvic.ca:192.168.4.2"
    depends_on:
      - mongodb
      - rabbitmq_backend
      - rabbitmq_confirm
    
  rabbitmq_frontend:
    image: rabbitmq:3-management
    container_name: rabbitmq-frontend
    restart: unless-stopped
    networks:
     - custom_network
    # environment:
    #   - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER:-admin}
    #   - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS:-admin}
    ports:
      - 5672:5672
      - 15672:15672
    #logging:
    #driver: "none"

  rabbitmq_backend:
    image: rabbitmq:3-management
    container_name: rabbitmq-backend
    restart: unless-stopped
    networks:
     - custom_network
    #logging:
    #driver: "none"

  rabbitmq_confirm:
    image: rabbitmq:3-management
    container_name: rabbitmq-confirm
    restart: unless-stopped
    networks:
     - custom_network
    #logging:
    #driver: "none"

  mongodb:
    image: mongo
    container_name: mongodb
    networks:
     - custom_network
    restart: unless-stopped
    command: mongod --auth
    environment:
      MONGO_INITDB_ROOT_USERNAME: pygang_root
      MONGO_INITDB_ROOT_PASSWORD: pygang_root
      MONGO_INITDB_DATABASE: pygangdb
      MONGODB_DATA_DIR: /data/db
      MONGODB_LOG_DIR: /dev/null
    volumes:
     - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
     - mongo-data:/data/db
    logging:
      driver: "none"

volumes:
  mongo-data:
    driver: local

networks:
  custom_network:
    driver: bridge
